;; init-bindings.el --- bindings.	-*- lexical-binding: t -*-

;;; Commentary:
;;
;; key-bindings.
;;

;;; Code:

(eval-when-compile
  (require 'init-utils))

(use-package hydra
  :ensure t
  :config
  (use-package ivy-hydra
    :ensure t
    :after ivy))

(defhydra hydra-mark
  (:columns 5  :idle 0)
  "Mark"
  ("d" er/mark-defun "Defun / Function")
  ("f" er/mark-defun "Defun / Function")
  ("W" mark-whole-buffer "Whole buffer")
  ("w" er/mark-word "Word")
  ("u" er/mark-url "Url")
  ("e" mark-sexp "S-Expression")
  ("E" er/mark-email "Email")
  ("b" hydra-mark-buffer/body "Buffer")
  ("p" er/mark-text-paragraph "Paragraph")
  ("s" er/mark-symbol "Symbol")
  ("S" er/mark-symbol-with-prefix "Prefixed symbol")
  ("i" er/mark-inside-quotes "Inside quotes")
  ("o" er/mark-outside-quotes "Outside quotes")
  ("(" er/mark-inside-pairs "Inside pairs")
  ("[" er/mark-inside-pairs "Inside pairs")
  ("{" er/mark-inside-pairs "Inside pairs")
  (")" er/mark-outside-pairs "Outside pairs")
  ("]" er/mark-outside-pairs "Outside pairs")
  ("}" er/mark-outside-pairs "Outside pairs")
  ("t" er/mark-inner-tag "Inner tag")
  ("T" er/mark-outer-tag "Outer tag")
  ("c" er/mark-comment "Comment")
  ("a" er/mark-html-attribute "HTML attribute")
  ("." er/expand-region "Expand region" :exit nil)
  ("," er/contract-region "Contract region" :exit nil)
  ("C-n" next-line "next-line")
  ("C-p" previous-line "previous-line")
  ("C-b" backward-char "backward-char")
  ("C-f" forward-char "forward-char")
  ("C-x o" switch-window "switch-window")
  ("C-x b" ivy-switch-buffer "switch-buffer")
  ("q" nil "Quit" :exit t))


(defhydra hydra-move
  (:columns 4  :idle 0)
  "Goto"
  ("c" avy-goto-char "char")
  ("l" goto-line "line")
  ("<SPC>" goto-last-change "last change")
  ("r" counsel-rg "counsel-rg")
  ("f" counsel-fzf "counsel-fzf")
  ("p" beginning-of-defun "beginning-of-defun")
  ("n" end-of-defun "end-of-defun")
  ("a" beginning-of-buffer "beginning-of-buffer")
  ("e" end-of-buffer "end-of-buffer")
  ("," dumb-jump-back "dumb-jump-back")
  ("." dumb-jump-go-other-window "dumb-jump-go-other-window")
  ("i" dumb-jump-go-prompt "dumb-jump-go-prompt")
  ("C-n" next-line "next-line")
  ("C-p" previous-line "previous-line")
  ("C-b" backward-char "backward-char")
  ("C-f" forward-char "forward-char")
  ("C-a" move-beginning-of-line "move-beginning-of-line")
  ("C-e" move-end-of-line "move-end-of-line")
  ("C-x o" switch-window "switch-window")
  ("C-x b" ivy-switch-buffer "switch-buffer")
  ("q" nil "Quit" :exit t))


(defhydra hydra-edit
  (:columns 5  :idle 0)
  "Edit"
  ("u" upcase-dwim "upcase-dwim")
  ("l" downcase-dwim "downcase-dwim")
  ("c" capitalize-dwim "capitalize-dwim")
  ("m" set-mark-command "Mark set")
  ("<SPC>" self-insert-command "SPC")
  ("a" align-regexp "align-regexp")
  ("s" sort-regexp-fields "sort-regexp-fields")
  ("S" sort-columns "sort-column")
  ("+" evil-numbers/inc-at-pt "increase number")
  ("=" evil-numbers/inc-at-pt "increase number")
  ("f" format-all-buffer "format")
  ("." er/expand-region "Expand region" :exit nil)
  ("," er/contract-region "Contract region" :exit nil)
  ("p" er/mark-paragraph "Mark Paragraph")
  ("-" evil-numbers/dec-at-pt "decrease number")
  ("i" iorest/indent-region-or-buffer "indent buffer region")
  ("C-u" upcase-region "Upcase region")
  ("C-d" downcase-region "Downcase region")
  ("C-c" capitalize-region "Capitalize region")
  ("C-n" next-line "next-line")
  ("C-p" previous-line "previous-line")
  ("C-b" backward-char "backward-char")
  ("C-f" forward-char "forward-char")
  ("M-b" backward-word "backward-word")
  ("M-f" forward-word "forward-word")
  ("C-a" move-beginning-of-line "move-beginning-of-line")
  ("C-e" move-end-of-line "move-end-of-line")
  ("C-x o" switch-window "switch-window")
  ("C-x b" ivy-switch-buffer "switch-buffer")
  ("q" nil "Quit" :exit t))

;; Hydra - Multiple cursors
(defhydra hydra-mc
  (:columns 4  :idle 0)
  "Multiple cursors"
  ("l" mc/edit-lines "Edit lines in region" :exit t)
  ("b" mc/edit-beginnings-of-lines "Edit beginnings of lines in region" :exit t)
  ("e" mc/edit-ends-of-lines "Edit ends of lines in region" :exit t)
  ("a" mc/mark-all-dwim "Mark all dwim" :exit t)
  ("S" mc/mark-all-symbols-like-this "Mark all symbols likes this" :exit t)
  ("w" mc/mark-all-words-like-this "Mark all words like this" :exit t)
  ("r" mc/mark-all-in-region "Mark all in region" :exit t)
  ("R" mc/mark-all-in-region-regexp "Mark all in region (regexp)" :exit t)
  ("d" mc/mark-all-like-this-in-defun "Mark all like this in defun" :exit t)
  ("s" mc/mark-all-symbols-like-this-in-defun "Mark all symbols like this in defun" :exit t)
  ("W" mc/mark-all-words-like-this-in-defun "Mark all words like this in defun" :exit t)
  ("i" mc/insert-numbers "Insert numbers" :exit t)
  ("n" mc/mark-next-like-this "Mark next like this")
  ("N" mc/skip-to-next-like-this "Skip to next like this")
  ("M-n" mc/unmark-next-like-this "Unmark next like this")
  ("p" mc/mark-previous-like-this "Mark previous like this")
  ("P" mc/skip-to-previous-like-this "Skip to previous like this")
  ("M-p" mc/unmark-previous-like-this "Unmark previous like this")
  ("q" nil "Quit" :exit t))

(defhydra hydra-paredit
  (:columns 5  :idle 0)
  "Paredit"
  ("(" paredit-wrap-round "Wrap round")
  ("[" paredit-wrap-square "Wrap square")
  ("<" paredit-wrap-angled "Wrap square")
  ("{" paredit-wrap-curly "Wrap curly")
  ("s" paredit-splice-sexp "Splice")
  ("S" paredit-split-sexp "Split")
  ("j" paredit-join-sexps "Join")
  ("r" paredit-raise-sexp "Raise s-expression")
  ("<down>" paredit-backward-barf-sexp "Left to right")
  ("<right>" paredit-forward-slurp-sexp "Right to right")
  ("<left>" paredit-forward-barf-sexp "Right to left")
  ("<up>" paredit-backward-slurp-sexp "Left to left")
  ("M-J" paredit-join-with-previous-list "Join prev list")
  ("C" paredit-convolute-sexp "Convolute")
  ("M-c" paredit-copy-as-kill "Copy as kill")
  ("k" paredit-kill "Kill")
  ("J" paredit-join-with-next-list "Join next list")
  ("m" evilmi-select-items "evilmi-select-items")
  ("d" evilmi-delete-items "evilmi-delete-items")
  ("n" evilmi-jump-items "evilmi-jump-items")
  ("C-n" next-line "next-line")
  ("C-p" previous-line "previous-line")
  ("C-b" backward-char "backward-char")
  ("C-f" forward-char "forward-char")
  ("C-a" move-beginning-of-line "move-beginning-of-line")
  ("C-e" move-end-of-line "move-end-of-line")
  ("C-x o" switch-window "switch-window")
  ("C-x b" ivy-switch-buffer "switch-buffer")
  ("q" nil "Quit" :exit t))

(defhydra hydra-transpose
  (:columns 3  :idle 0)
  "Transpose"
  ("c" transpose-chars "Chars")
  ("w" transpose-words "Words")
  ("l" transpose-lines "Lines")
  ("e" transpose-sexps "S-expressions")
  ("s" transpose-sentences "sentences")
  ("p" transpose-paragraphs "Paragraphs")
  ("W" ace-swap-window "Windows / Buffers")
  ("b" ace-swap-window "Windows / Buffers")
  ("C-n" next-line "next-line")
  ("C-p" previous-line "previous-line")
  ("C-b" backward-char "backward-char")
  ("C-f" forward-char "forward-char")
  ("C-a" move-beginning-of-line "move-beginning-of-line")
  ("C-e" move-end-of-line "move-end-of-line")
  ("C-x o" switch-window "switch-window")
  ("C-x b" ivy-switch-buffer "switch-buffer")
  ("q" nil "Quit" :exit t))

(defhydra hydra-help
  (:columns 4  :idle 0)
  "Help"
  ("<SPC><SPC>" cheat-sh "Cheat sheet")
  ("<SPC>s" cheat-sh-search "Cheat sheet Search")
  ("<SPC>x" cheat-sh-search-topic "Cheat Search Topic")
  ("<SPC>r" cheat-sh-region "Cheat sheet Region")
  ("a" apropos-command "Command")
  ("d" apropos-documentation "Documentation")
  ("t" tldr "Tldr Help")
  ("." display-local-help "Help Local")
  ("m" describe-mode "Mode")
  ("F" evil-show-file-info "File Info")
  ("k" describe-bindings "Bindings")
  ("v" describe-variable "Variable")
  ("f" describe-function "Function")
  ("u" counsel-unicode-char "Unicode")
  ("s" describe-syntax "Syntax")
  ("c" describe-coding-system "Coding system")
  ("l" describe-language-environment "Lang")
  ("i" describe-input-method "Input Method")
  ("C-n" next-line "next-line")
  ("C-p" previous-line "previous-line")
  ("C-b" backward-char "backward-char")
  ("C-f" forward-char "forward-char")
  ("C-a" move-beginning-of-line "move-beginning-of-line")
  ("C-e" move-end-of-line "move-end-of-line")
  ("C-x o" switch-window "switch-window")
  ("C-x b" ivy-switch-buffer "switch-buffer")
  ("q" nil "Quit" :exit t))

(defhydra hydra-function
  (:columns 4  :idle 0)
  "Functions"
  ("r" crux-reopen-as-root-mode "reopen-as-root-mode")
  ("s" crux-sudo-edit "sudo-edit")
  ("n" crux-rename-buffer-and-file "rename-buffer-file")
  ("b" crux-create-scratch-buffer "scratch")
  ("k" crux-delete-file-and-buffer "delete-buffer-file")
  ("c" crux-cleanup-buffer-or-region "clearup-buffer")
  ("i" crux-find-user-init-file  "init-file")
  ("z" crux-find-shell-init-file "shinit-file")
  ("m" crux-duplicate-current-line-or-region "duplicate")
  ("f" format-all-buffer "format")
  ("C-n" next-line "next-line")
  ("C-p" previous-line "previous-line")
  ("C-b" backward-char "backward-char")
  ("C-f" forward-char "forward-char")
  ("C-a" move-beginning-of-line "move-beginning-of-line")
  ("C-e" move-end-of-line "move-end-of-line")
  ("C-x o" switch-window "switch-window")
  ("C-x b" ivy-switch-buffer "switch-buffer")
  ("q" nil "Quit" :exit t))


(provide 'init-bindings)
;;; init-bindings.el ends here
